/*
 * MEC Use-Case 3 API
 *
 * This section describes a use case that the user can accomplish using the MEC Sandbox APIs from a MEC application
 *
 * API version: 0.0.1
 * Generated by: Swagger Codegen (https://github.com/swagger-api/swagger-codegen.git)
 */
package main

import (
	"net/http"
	"os"
	"os/signal"
	"strings"
	"syscall"
	"time"

	server "github.com/InterDigitalInc/AdvantEDGE/example/demo3/src/server"
	log "github.com/InterDigitalInc/AdvantEDGE/go-packages/meep-logger"
	"github.com/gorilla/handlers"
)

// Initalize customized logger
func init() {
	log.MeepTextLogInit("Demo-3")
}

func main() {
	var (
		envName string
		envPath string
		run     bool
	)

	// Check command arguments for configuration path
	for _, arg := range os.Args {
		if strings.HasPrefix(arg, ".") {
			envPath = arg
		}
	}

	// Parse filename from path
	resp := strings.LastIndex(envPath, "/")
	if resp == -1 {
		log.Fatal("Error parsing command invalid/missing configuration path")
	}

	// Save parsed filename & remove filename from filepath
	envName = envPath[resp+1:]
	envPath = envPath[:resp]

	run = true

	go func() {

		// Setup configuration for Demo 3 then initalize use-case service
		port, err := server.Init(envPath, envName)
		if err != nil {
			log.Info("Failed to initaliize Demo 3", err)
		}

		// Start demo 3 client
		server.Run()

		// Start demo 3 server
		router := server.NewRouter()
		methods := handlers.AllowedMethods([]string{"OPTIONS", "DELETE", "GET", "HEAD", "POST", "PUT"})
		header := handlers.AllowedHeaders([]string{"content-type"})
		log.Fatal(http.ListenAndServe(port, handlers.CORS(methods, header)(router)))
		run = false

	}()

	go func() {
		sigchan := make(chan os.Signal, 10)
		signal.Notify(sigchan, syscall.SIGINT, syscall.SIGTERM)
		<-sigchan
		log.Info("Waiting to shut down program !")
		run = false
	}()

	for {
		// Invoke graceful termination upon program kill
		if !run {
			server.Terminate()
			break
		}
		time.Sleep(time.Second)

	}
}
