/*
 * MEC Use-Case 3 API
 *
 * This section describes a use case that the user can accomplish using the MEC Sandbox APIs from a MEC application
 *
 * API version: 0.0.1
 * Generated by: Swagger Codegen (https://github.com/swagger-api/swagger-codegen.git)
 */
package server

import (
	"context"
	"encoding/json"
	"errors"
	"net/http"
	"strings"
	"sync"

	"github.com/InterDigitalInc/AdvantEDGE/example/demo3/src/util"
	asc "github.com/InterDigitalInc/AdvantEDGE/go-packages/meep-app-support-client"
	log "github.com/InterDigitalInc/AdvantEDGE/go-packages/meep-logger"
	smc "github.com/InterDigitalInc/AdvantEDGE/go-packages/meep-service-mgmt-client"
)

var mutex sync.Mutex

var srvMgmtClient *smc.APIClient
var appSupportClient *asc.APIClient

var instanceName string
var mecUrl string
var localPort string
var subscriptionSent bool
var confirmReady bool
var appEnablementServiceId string
var subscriptionId string
var registeredService bool
var appSupportClientPath string
var srvMgmtClientPath string
var serviceName string = "user-app"
var scopeOfLocality string = defaultScopeOfLocality
var consumedLocalOnly bool = defaultConsumedLocalOnly
var terminationSubscription bool = false

const serviceAppVersion = "2.1.1"
const local = "http://10.190.115.162"
const defaultScopeOfLocality = "MEC_SYSTEM"
const defaultConsumedLocalOnly = true

func Init(envPath string, envName string) (port string, err error) {
	var config util.Config
	var configErr error

	log.Info("Using config from ", envPath, "/", envName)
	config, configErr = util.LoadConfig(envPath, envName)

	if configErr != nil {
		log.Fatal(configErr)
	}

	// Retrieve app id from config
	instanceName = config.AppInstanceId

	// Retrieve sandbox url from config
	mecUrl = config.SandboxUrl

	// Retreieve local url from config
	localPort = config.Port

	// Retrieve service name config if present
	if config.ServiceName != "" {
		serviceName = config.ServiceName
	}

	// Create application support client
	appSupportClientCfg := asc.NewConfiguration()
	appSupportClientCfg.BasePath = mecUrl + "/mec_app_support/v1"
	appSupportClient = asc.NewAPIClient(appSupportClientCfg)
	appSupportClientPath = appSupportClientCfg.BasePath
	if appSupportClient == nil {
		return "", errors.New("Failed to create App Enablement App Support REST API client")
	}

	// Create service management client
	srvMgmtClientCfg := smc.NewConfiguration()
	srvMgmtClientCfg.BasePath = mecUrl + "/mec_service_mgmt/v1"
	srvMgmtClient = smc.NewAPIClient(srvMgmtClientCfg)
	srvMgmtClientPath = srvMgmtClientCfg.BasePath
	if srvMgmtClient == nil {
		return "", errors.New("Failed to create App Enablement Service Management REST API client")
	}

	return localPort, nil
}

// REST API
// Discover mec services & subscribe to service availilable subscription
func servicesSubscriptionPOST(w http.ResponseWriter, r *http.Request) {

	// Retrieving mec services
	err := getMecServices()
	if err != nil {
		http.Error(w, err.Error(), http.StatusInternalServerError)
		return
	}

	// Check subscription if sent to prevent resending subscription
	if !subscriptionSent {
		callBackReference := local + localPort + "/services/callback/service-availability"
		err := subscribeAvailability(instanceName, callBackReference)
		if err != nil {
			http.Error(w, err.Error(), http.StatusInternalServerError)
			return
		}
		subscriptionSent = true
	}

	// Send response
	w.WriteHeader(http.StatusOK)
}

// REST API
// Handle subscription callback notification
func notificationPOST(w http.ResponseWriter, r *http.Request) {

	// Decode request body
	var notification smc.ServiceAvailabilityNotification
	decoder := json.NewDecoder(r.Body)
	err := decoder.Decode(&notification)
	if err != nil {
		log.Error(err.Error())
		http.Error(w, err.Error(), http.StatusInternalServerError)
		return
	}

	log.Info("Received service availability notification")

	// Parse request param to show on logs
	msg := ""
	if notification.ServiceReferences[0].ChangeType == "ADDED" {
		msg = "Available"
	} else {
		msg = "Unavailable"
	}

	state := ""
	if *notification.ServiceReferences[0].State == smc.ACTIVE_ServiceState {
		state = "ACTIVE"
	} else {
		state = "UNACTIVE"
	}
	log.Info(notification.ServiceReferences[0].SerName + " " + msg + " (" + state + ")")

	w.WriteHeader(http.StatusNoContent)
}

// Rest API
// Create mec service
func servicePOST(w http.ResponseWriter, r *http.Request) {

	// Lock registered service to prevent creating more than one mec service
	mutex.Lock()
	defer mutex.Unlock()
	if !registeredService {
		err := registerService(instanceName)
		if err != nil {
			http.Error(w, err.Error(), http.StatusInternalServerError)
			return
		}
		registeredService = true
		w.WriteHeader(http.StatusOK)
	}
}

// Rest API - delete mec service
// Delete mec service only if present
func serviceDELETE(w http.ResponseWriter, r *http.Request) {
	mutex.Lock()
	defer mutex.Unlock()

	if registeredService {
		err := unregisterService(instanceName, appEnablementServiceId)
		if err != nil {
			http.Error(w, err.Error(), http.StatusInternalServerError)
			return
		}
		registeredService = false
		log.Info(serviceName, " service deleted")
		w.WriteHeader(http.StatusOK)
	}
}

// Rest API
// Handle user-app termination call-back notification
func terminateNotificatonPOST(w http.ResponseWriter, r *http.Request) {
	var notification asc.AppTerminationNotification
	decoder := json.NewDecoder(r.Body)
	err := decoder.Decode(&notification)
	if err != nil {
		log.Error(err.Error())
		http.Error(w, err.Error(), http.StatusInternalServerError)
		return
	}
	log.Info("Received user-app termination notification")
	w.WriteHeader(http.StatusNoContent)
	Terminate()
}

// Client request to notify mec platform of mec app
func sendReadyConfirmation(appInstanceId string) error {
	log.Debug("Sending request to mec platform user-app confirm-ready api")
	var appReady asc.AppReadyConfirmation
	appReady.Indication = "READY"
	resp, err := appSupportClient.MecAppSupportApi.ApplicationsConfirmReadyPOST(context.TODO(), appReady, appInstanceId)
	if err != nil {
		log.Error("Failed to send ready confirm acknowlegement: ", resp.Status)
		return err
	}
	return nil
}

// Client request to retrieve list of mec service resources on sandbox
func getMecServices() error {
	appServicesPostResponse, resp, err := srvMgmtClient.MecServiceMgmtApi.ServicesGET(context.TODO(), nil)
	log.Debug("Sending request to mec platform get services api ") //srvMgmtClientPath
	if err != nil {
		log.Error("Failed to fetch services on mec platform ", resp.Status)
		return err
	}

	log.Info("Returning available mec services on mec platform")
	servicesName := make([]string, len(appServicesPostResponse))
	for i := 0; i < len(appServicesPostResponse); i++ {
		servicesName[i] = appServicesPostResponse[i].SerName + " URL: " + appServicesPostResponse[i].TransportInfo.Endpoint.Uris[0]
	}

	for _, v := range servicesName {
		log.Info(v)
	}

	return nil
}

// Client request to create a mec-service resource
func registerService(appInstanceId string) error {
	log.Debug("Sending request to mec platform post service api ")
	var srvInfo smc.ServiceInfoPost
	//serName
	srvInfo.SerName = serviceName
	//version
	srvInfo.Version = serviceAppVersion
	//state
	state := smc.ACTIVE_ServiceState
	srvInfo.State = &state
	//serializer
	serializer := smc.JSON_SerializerType
	srvInfo.Serializer = &serializer

	//transportInfo
	var transportInfo smc.TransportInfo
	transportInfo.Id = "transport"
	transportInfo.Name = "REST"
	transportType := smc.REST_HTTP_TransportType
	transportInfo.Type_ = &transportType
	transportInfo.Protocol = "HTTP"
	transportInfo.Version = "2.0"
	var endpoint smc.OneOfTransportInfoEndpoint
	endpointPath := local + "/" + localPort
	endpoint.Uris = append(endpoint.Uris, endpointPath)
	transportInfo.Endpoint = &endpoint
	srvInfo.TransportInfo = &transportInfo

	//serCategory
	var category smc.CategoryRef
	category.Href = "catalogueHref"
	category.Id = "amsId"
	category.Name = "AMSI"
	category.Version = "v1"
	srvInfo.SerCategory = &category

	//scopeOfLocality
	localityType := smc.LocalityType(scopeOfLocality)
	srvInfo.ScopeOfLocality = &localityType

	//consumedLocalOnly
	srvInfo.ConsumedLocalOnly = consumedLocalOnly

	appServicesPostResponse, resp, err := srvMgmtClient.MecServiceMgmtApi.AppServicesPOST(context.TODO(), srvInfo, appInstanceId)
	if err != nil {
		log.Error("Failed to register service on mec app enablement registry: ", resp.Status)
		return err
	}
	log.Info(serviceName, " service created with instance id: ", appServicesPostResponse.SerInstanceId)
	appEnablementServiceId = appServicesPostResponse.SerInstanceId
	registeredService = true
	return nil
}

// Client request to delete a mec-service resource
func unregisterService(appInstanceId string, serviceId string) error {
	log.Debug("Sending request to mec platform delete service api")
	resp, err := srvMgmtClient.MecServiceMgmtApi.AppServicesServiceIdDELETE(context.TODO(), appInstanceId, serviceId)
	if err != nil {
		log.Debug("Failed to send request to delete service on mec platform ", resp.Status)
		return err
	}
	return nil
}

// Client request to subscribe service-availability notifications
func subscribeAvailability(appInstanceId string, callbackReference string) error {
	log.Debug("Sending request to mec platform add subscription api") //srvMgmtClientPath
	var filter smc.SerAvailabilityNotificationSubscriptionFilteringCriteria
	filter.SerNames = nil
	filter.IsLocal = true
	subscription := smc.SerAvailabilityNotificationSubscription{"SerAvailabilityNotificationSubscription", callbackReference, nil, &filter}
	serAvailabilityNotificationSubscription, resp, err := srvMgmtClient.MecServiceMgmtApi.ApplicationsSubscriptionsPOST(context.TODO(), subscription, appInstanceId)
	if err != nil {
		log.Error("Failed to send service subscription: ", resp.Status)
		return err
	}

	hRefLink := serAvailabilityNotificationSubscription.Links.Self.Href

	// Find subscription id from response
	idPosition := strings.LastIndex(hRefLink, "/")
	if idPosition == -1 {
		log.Error("Error parsing subscription id for subscription")
	}
	subscriptionId = hRefLink[idPosition+1:]

	log.Info("Subscribed to service availibility notification on mec platform")

	return nil
}

// Client request to subscribe app-termination notifications
func subscribeAppTermination(appInstanceId string, callBackReference string) error {
	log.Debug("Sending request to mec platform confirm terminate subscription api")
	var appTerminationBody asc.AppTerminationNotificationSubscription
	appTerminationBody.SubscriptionType = "AppTerminationNotificationSubscription"
	appTerminationBody.CallbackReference = callBackReference
	appTerminationBody.AppInstanceId = appInstanceId
	_, resp, err := appSupportClient.MecAppSupportApi.ApplicationsSubscriptionsPOST(context.TODO(), appTerminationBody, appInstanceId)
	if err != nil {
		log.Error("Failed to send termination subscription: ", resp.Status)
		return err
	}
	return nil
}

// Client request to delete subscription of service-availability notifications
func delsubscribeAvailability(appInstanceId string, subscriptionId string) error {
	resp, err := srvMgmtClient.MecServiceMgmtApi.ApplicationsSubscriptionDELETE(context.TODO(), appInstanceId, subscriptionId)
	if err != nil {
		log.Error("Failed to clear mec subscriptions: ", resp.Status)
		return err
	}
	return nil
}

// Confirm app readiness & app termination subscription
func Run() {

	// Confirm application readiness
	if !confirmReady {
		err := sendReadyConfirmation(instanceName)
		if err != nil {
			log.Fatal("Check configurations if valid")
		} else {
			log.Info("User app is ready to mec platform")
		}
	}

	// Subscribe for App Termination notifications
	if !terminationSubscription {
		var callBackReference string
		callBackReference = local + localPort + "/application/termination"
		err := subscribeAppTermination(instanceName, callBackReference)
		if err == nil {
			log.Info("Subscribed to app termination notification on mec platform")
		}
	}

}

// Terminate by deleting all resources allocated on MEC platform & mec app
func Terminate() {
	// Delete subscription & registered services

	if subscriptionSent {
		err := delsubscribeAvailability(instanceName, subscriptionId)
		if err == nil {
			log.Info("Cleared user-app subscription on mec platform")
		}
	}

	if registeredService {
		err := unregisterService(instanceName, appEnablementServiceId)
		if err == nil {
			log.Info("Cleared user-app services on mec platform")
		}
	}
}
