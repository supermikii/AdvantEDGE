/*
 * Copyright (c) 2020  InterDigital Communications, Inc
 *
 * Licensed under the Apache License, Version 2.0 (the \"License\");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an \"AS IS\" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 * MEC Demo 3 API
 *
 * This section describes use case 3 - 5 that the user can accomplish using the MEC Sandbox APIs from a MEC application
 *
 * API version: 0.0.1
 * Contact: AdvantEDGE@InterDigital.com
 * Generated by: Swagger Codegen (https://github.com/swagger-api/swagger-codegen.git)
 */
package server

import (
	"fmt"
	"net/http"
	"strings"

	"github.com/gorilla/mux"
)

type Route struct {
	Name        string
	Method      string
	Pattern     string
	HandlerFunc http.HandlerFunc
}

type Routes []Route

func NewRouter() *mux.Router {
	router := mux.NewRouter().StrictSlash(true)
	for _, route := range routes {
		var handler http.Handler
		handler = route.HandlerFunc
		handler = Logger(handler, route.Name)

		router.
			Methods(route.Method).
			Path(route.Pattern).
			Name(route.Name).
			Handler(handler)
	}

	return router
}

func Index(w http.ResponseWriter, r *http.Request) {
	fmt.Fprintf(w, "Hello World!")
}

var routes = Routes{
	Route{
		"Index",
		"GET",
		"/",
		Index,
	},

	Route{
		"ServiceCreatePost",
		strings.ToUpper("Post"),
		"/service/create",
		ServiceCreatePost,
	},

	Route{
		"ServiceDeleteDelete",
		strings.ToUpper("Delete"),
		"/service/delete",
		ServiceDeleteDelete,
	},

	Route{
		"ServicesDiscoverPost",
		strings.ToUpper("Post"),
		"/services/discover",
		ServicesDiscoverPost,
	},

	Route{
		"NotificationPOST",
		strings.ToUpper("Post"),
		"/services/callback/service-availability",
		NotificationPOST,
	},

	Route{
		"TerminateNotificatonPOST",
		strings.ToUpper("Post"),
		"/application/termination",
		TerminateNotificatonPOST,
	},
	Route{
		"AmsCreatePOST",
		strings.ToUpper("post"),
		"/service/ams/create",
		AmsCreatePOST,
	},
	Route{
		"AmsSubscriptionPOST",
		strings.ToUpper("post"),
		"/ams/subscriptions",
		AmsSubscriptionPOST,
	},
	Route{
		"AmsNotificationPOST",
		strings.ToUpper("post"),
		"/services/callback/amsevent",
		AmsNotificationPOST,
	},
}
